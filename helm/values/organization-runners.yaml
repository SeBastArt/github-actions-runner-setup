# GitHub Actions Runner Scale Set Values
# ARC v0.12+ Compatible - WITH Docker/Podman for container builds

githubConfigUrl: https://github.com/wondering-developer
githubConfigSecret:
  github_token: ""  # Will be set via --set

# Runner configuration
runnerGroup: "default"
maxRunners: 5
minRunners: 1

# CRITICAL: This is how runners are targeted now (by installation name)
runnerScaleSetName: "arm64-runners"

# NOTE: runnerLabels are NOT supported in ARC v0.12+
# Runners automatically get: self-hosted, linux, ARM64 based on runtime detection

# Template for ARM64 runners with Docker/Podman pre-installed
template:
  spec:
    # CRITICAL: This nodeSelector ensures ARM64 placement and triggers ARM64 label
    nodeSelector:
      kubernetes.io/arch: arm64
    
    # Init container to install Docker/Podman
    initContainers:
    - name: install-container-tools
      image: ubuntu:22.04
      command: ["/bin/bash"]
      args:
      - -c
      - |
        echo "ðŸ”§ Installing container build tools..."
        apt-get update
        apt-get install -y curl apt-transport-https ca-certificates gnupg lsb-release
        
        # Install Docker
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
        apt-get update
        apt-get install -y docker-ce-cli
        
        # Also install Podman as backup
        apt-get install -y podman
        
        # Install kubectl and helm
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl"
        chmod +x kubectl
        mv kubectl /shared-tools/
        
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        mv /usr/local/bin/helm /shared-tools/
        
        echo "âœ… Container tools installed successfully"
      
      volumeMounts:
      - name: shared-tools
        mountPath: /shared-tools
      
      securityContext:
        runAsUser: 0  # Root for package installation
    
    containers:
    - name: runner
      image: ghcr.io/actions/actions-runner:latest
      command: ["/home/runner/run.sh"]
      
      # Resource configuration
      resources:
        requests:
          cpu: "100m"
          memory: "256Mi"
        limits:
          cpu: "2000m"
          memory: "4Gi"
      
      # Environment variables for container builds
      env:
      - name: RUNNER_TOOL_CACHE
        value: "/opt/hostedtoolcache"
      - name: PATH
        value: "/shared-tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      - name: DOCKER_HOST
        value: "tcp://docker-dind:2376"
      
      # Volume mounts
      volumeMounts:
      - name: tool-cache
        mountPath: /opt/hostedtoolcache
      - name: shared-tools
        mountPath: /shared-tools
      - name: docker-certs
        mountPath: /certs
    
    # Docker-in-Docker sidecar container
    - name: docker-dind
      image: docker:24-dind
      env:
      - name: DOCKER_TLS_CERTDIR
        value: "/certs"
      
      securityContext:
        privileged: true
      
      volumeMounts:
      - name: docker-certs
        mountPath: /certs
    
    # Volumes
    volumes:
    - name: tool-cache
      emptyDir: {}
    - name: shared-tools
      emptyDir: {}
    - name: docker-certs
      emptyDir: {}
      
    restartPolicy: Never
    
    # Security context
    securityContext:
      runAsUser: 1001
      runAsGroup: 121
      fsGroup: 121

# Autoscaling configuration
scaleDownDelaySecondsAfterScaleOut: 300
scaleDownFactor: 0.5

# Cleanup
podCleanupTimeout: 600
