name: Deploy GitHub Actions Runners

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      runner_replicas:
        description: 'Number of runner replicas'
        required: true
        default: '2'
        type: string
      
  push:
    branches:
      - main
    paths:
      - 'helm/**'
      - '.github/workflows/deploy-runners.yml'

env:
  HELM_VERSION: "3.13.0"
  # Using latest ARC version for best compatibility and features
  ARC_VERSION: "0.12.1"

jobs:
  deploy-arc:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          
          # Verify connection
          kubectl cluster-info
          kubectl get nodes

      - name: Install cert-manager (required for ARC)
        run: |
          # Add cert-manager repo
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          
          # Install cert-manager with CRDs
          helm upgrade --install cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --set crds.enabled=true \
            --set nodeSelector."kubernetes\.io/arch"=arm64 \
            --wait
          
          # Wait for cert-manager to be ready
          kubectl wait --namespace cert-manager \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/name=cert-manager \
            --timeout=300s

      - name: Clean up old repository-level runners
        run: |
          # Remove ALL old installations (different naming conventions)
          helm uninstall arm64-runners --namespace actions-runner-system || echo "No old arm64-runners found"
          helm uninstall org-arm64-runners --namespace actions-runner-system || echo "No old org-arm64-runners found"
          
          # Wait for cleanup
          sleep 10
          
          # Clean up old resources and remove finalizers if stuck
          kubectl patch autoscalingrunnerset arm64-runners -n actions-runner-system \
            --type=merge -p '{"metadata":{"finalizers":null}}' || echo "No old AutoscalingRunnerSet arm64-runners found"
          kubectl patch autoscalingrunnerset org-arm64-runners -n actions-runner-system \
            --type=merge -p '{"metadata":{"finalizers":null}}' || echo "No old AutoscalingRunnerSet org-arm64-runners found"
          
          kubectl delete autoscalingrunnerset arm64-runners -n actions-runner-system || echo "No old AutoscalingRunnerSet arm64-runners found"
          kubectl delete autoscalingrunnerset org-arm64-runners -n actions-runner-system || echo "No old AutoscalingRunnerSet org-arm64-runners found"

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.TOKEN }}" | helm registry login ghcr.io --username ${{ github.actor }} --password-stdin

      - name: Install ARC Controller (OCI Registry)
        run: |
          helm upgrade --install arc \
            --namespace actions-runner-system \
            --create-namespace \
            --set nodeSelector."kubernetes\.io/arch"=arm64 \
            --wait \
            oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set-controller

      - name: Deploy Runner Scale Set (Organization-Level)
        run: |
          # Organization-level runners for all repositories
          # NOTE: No Docker-in-Docker for containerd compatibility
          helm upgrade --install arm64-runners \
            --namespace actions-runner-system \
            --create-namespace \
            --values ./helm/values/organization-runners.yaml \
            --set-string githubConfigSecret.github_token="${{ secrets.TOKEN }}" \
            --set-string githubConfigUrl="${{ secrets.CONFIG_URL || 'https://github.com/wondering-developer' }}" \
            --set maxRunners=${{ github.event.inputs.runner_replicas || 5 }} \
            --set minRunners=1 \
            --set-string runnerGroup="default" \
            --wait \
            --timeout=10m \
            oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set

      - name: Verify deployment
        run: |
          echo "üîç Checking ARC Controller status..."
          kubectl get pods -n actions-runner-system
          
          echo "üìä Checking AutoscalingRunnerSet (ARC v0.12+ API)..."
          kubectl get autoscalingrunnerset -n actions-runner-system -o wide || echo "No AutoscalingRunnerSet found yet"
          
          echo "üéØ CRITICAL: Checking Runner Installation Name (NEW targeting method)..."
          kubectl get autoscalingrunnerset arm64-runners -n actions-runner-system -o jsonpath='{.metadata.name}' || echo "arm64-runners installation not found"
          echo ""
          echo "Installation details:"
          kubectl get autoscalingrunnerset arm64-runners -n actions-runner-system -o yaml | grep -E "name:|runnerScaleSetName:" || echo "Installation details not available"
          
          echo "üèóÔ∏è Automatic Labels (ARC v0.12+ generates these based on runtime):"
          echo "  - self-hosted (automatic)"
          echo "  - linux (from OS detection)"
          echo "  - ARM64 (from nodeSelector: kubernetes.io/arch=arm64)"
          echo "  - arm64-runners (installation name for targeting)"
          
          echo "üîç Checking EphemeralRunnerSet..."
          kubectl get ephemeralrunnerset -n actions-runner-system || echo "No EphemeralRunnerSet found yet"
          
          echo "üìã Checking Helm release status..."
          helm status arm64-runners -n actions-runner-system
          
          echo "üìã Checking Helm values (no runnerLabels in v0.12+)..."
          helm get values arm64-runners -n actions-runner-system
          
          echo "üîß Checking all custom resources..."
          kubectl api-resources | grep actions || echo "ARC CRDs not found"
          
          echo "üìù Checking recent events for any issues..."
          kubectl get events -n actions-runner-system --sort-by='.lastTimestamp' | tail -10
          
          echo "‚ö° Waiting for runner pods to be ready..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=gha-runner-scale-set -n actions-runner-system --timeout=300s || echo "Timeout waiting for runner pods"

      - name: Run setup verification
        run: |
          chmod +x ./scripts/verify-setup.sh
          ./scripts/verify-setup.sh
